{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#!/usr/bin/env python3\n",
        "# -*- coding: utf-8 -*-\n",
        "import argparse\n",
        "import secrets\n",
        "import string\n",
        "from typing import List\n",
        "\n",
        "SIMILARES = set(\"il1Lo0O\")\n",
        "AMBIGUOS = set(\"{}[]()/\\\\'`~,;:.<>\")\n",
        "\n",
        "def build_charset(use_lower: bool, use_upper: bool, use_digits: bool, use_symbols: bool,\n",
        "                  exclude_similar: bool, avoid_ambiguous: bool) -> str:\n",
        "    charset = \"\"\n",
        "    if use_lower:\n",
        "        charset += string.ascii_lowercase\n",
        "    if use_upper:\n",
        "        charset += string.ascii_uppercase\n",
        "    if use_digits:\n",
        "        charset += string.digits\n",
        "    if use_symbols:\n",
        "        charset += \"!@#$%^&*-=+?_\"\n",
        "    if exclude_similar:\n",
        "        charset = ''.join(ch for ch in charset if ch not in SIMILARES)\n",
        "    if avoid_ambiguous:\n",
        "        charset = ''.join(ch for ch in charset if ch not in AMBIGUOS)\n",
        "    return charset\n",
        "\n",
        "def ensure_minimums(password_chars: List[str], pools: List[str]):\n",
        "    idxs = list(range(len(password_chars)))\n",
        "    secrets.SystemRandom().shuffle(idxs)\n",
        "    for pool, i in zip([p for p in pools if p], idxs):\n",
        "        password_chars[i] = secrets.choice(pool)\n",
        "\n",
        "def has_sequences(pw: str, max_run: int = 3) -> bool:\n",
        "    if len(pw) < max_run:\n",
        "        return False\n",
        "    def runs(s: str):\n",
        "        run = 1\n",
        "        for i in range(1, len(s)):\n",
        "            if ord(s[i]) - ord(s[i-1]) == 1:\n",
        "                run += 1\n",
        "                if run >= max_run:\n",
        "                    return True\n",
        "            else:\n",
        "                run = 1\n",
        "        return False\n",
        "    lower = ''.join(c for c in pw if c.isalpha()).lower()\n",
        "    digits = ''.join(c for c in pw if c.isdigit())\n",
        "    return runs(lower) or runs(digits)\n",
        "\n",
        "def generate_password(length: int = 12,\n",
        "                      use_lower: bool = True, use_upper: bool = True,\n",
        "                      use_digits: bool = True, use_symbols: bool = True,\n",
        "                      exclude_similar: bool = True, avoid_ambiguous: bool = True,\n",
        "                      no_repeats: bool = False, no_sequences_flag: bool = True,\n",
        "                      max_attempts: int = 1000) -> str:\n",
        "    if length < 4:\n",
        "        raise ValueError(\"La longitud mÃ­nima recomendada es 4.\")\n",
        "    pools = []\n",
        "    if use_lower:\n",
        "        pools.append(''.join(ch for ch in string.ascii_lowercase if (ch not in SIMILARES if exclude_similar else True)))\n",
        "    if use_upper:\n",
        "        pools.append(''.join(ch for ch in string.ascii_uppercase if (ch not in SIMILARES if exclude_similar else True)))\n",
        "    if use_digits:\n",
        "        pools.append(''.join(ch for ch in string.digits if (ch not in SIMILARES if exclude_similar else True)))\n",
        "    if use_symbols:\n",
        "        base_symbols = \"!@#$%^&*-=+?_\"\n",
        "        pools.append(''.join(ch for ch in base_symbols if (ch not in AMBIGUOS if avoid_ambiguous else True)))\n",
        "    charset = build_charset(use_lower, use_upper, use_digits, use_symbols, exclude_similar, avoid_ambiguous)\n",
        "    if not charset:\n",
        "        raise ValueError(\"No hay caracteres disponibles: activa al menos una categorÃ­a.\")\n",
        "    rng = secrets.SystemRandom()\n",
        "    for _ in range(max_attempts):\n",
        "        password_chars = [''] * length\n",
        "        ensure_minimums(password_chars, pools)\n",
        "        for i in range(length):\n",
        "            if password_chars[i] == '':\n",
        "                c = rng.choice(charset)\n",
        "                if no_repeats:\n",
        "                    while i > 0 and c == password_chars[i-1]:\n",
        "                        c = rng.choice(charset)\n",
        "                password_chars[i] = c\n",
        "        pw = ''.join(password_chars)\n",
        "        if no_sequences_flag and has_sequences(pw):\n",
        "            continue\n",
        "        return pw\n",
        "    raise RuntimeError(\"No se pudo generar una contraseÃ±a que cumpla restricciones.\")\n",
        "\n",
        "def score_password(pw: str) -> int:\n",
        "    unique = len(set(pw))\n",
        "    length = len(pw)\n",
        "    variety = sum([any(c.islower() for c in pw),\n",
        "                   any(c.isupper() for c in pw),\n",
        "                   any(c.isdigit() for c in pw),\n",
        "                   any(c in \"!@#$%^&*-=+?_\" for c in pw)])\n",
        "    score = unique * 2 + length + variety * 4\n",
        "    return min(100, score)\n",
        "\n",
        "def describe_strength(score: int) -> str:\n",
        "    if score >= 80:\n",
        "        return \"Muy fuerte\"\n",
        "    if score >= 60:\n",
        "        return \"Fuerte\"\n",
        "    if score >= 40:\n",
        "        return \"Media\"\n",
        "    return \"DÃ©bil\"\n",
        "\n",
        "def parse_bool(s: str) -> bool:\n",
        "    return str(s).lower() in {\"1\",\"true\",\"t\",\"yes\",\"y\",\"si\",\"sÃ­\"}\n",
        "\n",
        "def main(argv=None):\n",
        "    parser = argparse.ArgumentParser()\n",
        "    parser.add_argument(\"--length\", type=int, default=16)\n",
        "    parser.add_argument(\"--no-lower\", type=parse_bool, default=False)\n",
        "    parser.add_argument(\"--no-upper\", type=parse_bool, default=False)\n",
        "    parser.add_argument(\"--no-digits\", type=parse_bool, default=False)\n",
        "    parser.add_argument(\"--symbols\", type=parse_bool, default=True)\n",
        "    parser.add_argument(\"--exclude-similar\", type=parse_bool, default=True)\n",
        "    parser.add_argument(\"--avoid-ambiguous\", type=parse_bool, default=True)\n",
        "    parser.add_argument(\"--no-repeats\", type=parse_bool, default=True)\n",
        "    parser.add_argument(\"--no-sequences\", dest=\"no_sequences_flag\", type=parse_bool, default=True)\n",
        "    parser.add_argument(\"--count\", type=int, default=5)\n",
        "    parser.add_argument(\"--interactive\", type=parse_bool, default=False)\n",
        "\n",
        "    # ðŸš€ cambio clave: si no paso argv, ignora los args de Jupyter\n",
        "    args = parser.parse_args(argv or [])\n",
        "\n",
        "    if args.interactive:\n",
        "        try:\n",
        "            args.length = int(input(\"Longitud: \").strip() or \"16\")\n",
        "        except ValueError:\n",
        "            args.length = 16\n",
        "        args.no_lower = parse_bool(input(\"Â¿Desactivar minÃºsculas?: \").strip() or \"False\")\n",
        "        args.no_upper = parse_bool(input(\"Â¿Desactivar mayÃºsculas?: \").strip() or \"False\")\n",
        "        args.no_digits = parse_bool(input(\"Â¿Desactivar dÃ­gitos?: \").strip() or \"False\")\n",
        "        args.symbols = parse_bool(input(\"Â¿Incluir sÃ­mbolos?: \").strip() or \"True\")\n",
        "        args.exclude_similar = parse_bool(input(\"Â¿Excluir similares?: \").strip() or \"True\")\n",
        "        args.avoid_ambiguous = parse_bool(input(\"Â¿Evitar ambiguos?: \").strip() or \"True\")\n",
        "        args.no_repeats = parse_bool(input(\"Â¿Evitar repeticiones?: \").strip() or \"True\")\n",
        "        args.no_sequences_flag = parse_bool(input(\"Â¿Evitar secuencias?: \").strip() or \"True\")\n",
        "        try:\n",
        "            args.count = int(input(\"Â¿CuÃ¡ntas contraseÃ±as?: \").strip() or \"5\")\n",
        "        except ValueError:\n",
        "            args.count = 5\n",
        "\n",
        "    use_lower = not args.no_lower\n",
        "    use_upper = not args.no_upper\n",
        "    use_digits = not args.no_digits\n",
        "    use_symbols = args.symbols\n",
        "\n",
        "    for i in range(args.count):\n",
        "        pw = generate_password(length=args.length,\n",
        "                               use_lower=use_lower, use_upper=use_upper,\n",
        "                               use_digits=use_digits, use_symbols=use_symbols,\n",
        "                               exclude_similar=args.exclude_similar, avoid_ambiguous=args.avoid_ambiguous,\n",
        "                               no_repeats=args.no_repeats, no_sequences_flag=args.no_sequences_flag)\n",
        "        score = score_password(pw)\n",
        "        print(f\"{i+1:02d}) {pw}  |  fuerzaâ‰ˆ{score}/100 ({describe_strength(score)})\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # ðŸš€ en Colab/Jupyter ignora args extra\n",
        "    main([])\n",
        "\n"
   
